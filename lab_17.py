#! /usr/bin/python

# autogenerated on 2020-05-20 11:42

# Morphological Operators

import cv2
import numpy as np

from utils import *


def cross_operator(img, callback):
    size_x, size_y = img.shape
    output = np.zeros((size_x, size_y), dtype=np.uint8)
    for x in range(size_x):
        for y in range(size_y):
            px = max(0, x - 1)
            nx = min(x + 1, size_x - 1)
            py = max(0, y - 1)
            ny = min(y + 1, size_y - 1)
            if callback(img[px, y], img[nx, y], img[x, py], img[x, ny]):
                output[x, y] = 255

    return output

def morphological_operator(img, kernel, value, early):
    size_x, size_y = img.shape
    kx, ky = kernel.shape
    kx //= 2 
    ky //= 2
    output = np.zeros((size_x, size_y), dtype=np.uint8)
    for x in range(size_x):
        for y in range(size_y):
            stat = True
            for i, row in enumerate(kernel):
                if not stat:
                    break
                px = x + (i - kx)
                px = min(max(0, px), size_x-1)
                for j, v in enumerate(row):
                    if v:
                        py = y + (j - ky)
                        py = min(max(0, py), size_y-1)
                        if img[px, py] == 255:
                            if early:
                                output[x, y] = value
                                stat = False
                                break
                        else:
                            stat = False
                            break
            if stat:
                output[x, y] = value
    return output

def erosion(img):
    return cross_operator(img, lambda a, b, c, d: a and b and c and d)


def dilation(img):
    return cross_operator(img, lambda a, b, c, d: a or b or c or d)


def opening(img, kernel=None, value=None):
    if kernel is None:
        img = erosion(img)
        img = dilation(img)
    else:
        img = morphological_operator(img, kernel, value, False)
        img = morphological_operator(img, kernel, value, True)

    return img

def closing(img, kernel=None, value=None):
    if kernel is None:
        img = dilation(img)
        img = erosion(img)
    else: 
        img = morphological_operator(img, kernel, value, True)
        img = morphological_operator(img, kernel, value, False)

    return img


def main():
    img = load_image_from_arg()
    original = img.copy()
    _, img = cv2.threshold(img, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    
    if False:
        cross_kernel = np.array([[1., 0., 1., 0., 1.],
                                 [0., 1., 1., 1., 0.],
                                 [1., 1., 0., 1., 1.],
                                 [0., 1., 1., 1., 0.],
                                 [1., 0., 1., 0., 1.]], dtype=np.uint8)
    else:
        cross_kernel = np.array([
                                 [1., 1., 1.],
                                 [1., 0., 1.],
                                 [1., 1., 1.],
                                 ], dtype=np.uint8)

    img = 255 - img
    binary = img.copy()

    img = cv2.dilate(img, cross_kernel)
    img = cv2.morphologyEx(img, cv2.MORPH_CLOSE, cross_kernel)
    img = cv2.erode(img, cross_kernel)


    show_image(original, binary, img, wait=60)



if __name__ == "__main__":
    main()
