#! /usr/bin/python

# autogenerated on 2020-05-14 16:54

# Region Growing

import cv2
import numpy as np
import secrets

from utils import *


def random_seed(regions):
    available = [
        (i, j) for i, row in enumerate(regions) for j, v in enumerate(row) if v == 0
    ]
    if len(available) == 0:
        return None
    else:

        return secrets.choice(available)


def grow_region(img, regions, pixel, region, seed_list, threshold, borders):
    output = 0
    x, y = pixel
    size_x, size_y = img.shape[0], img.shape[1]
    for i in (-1, 0, 1):
        for j in (-1, 0, 1):
            if i and j:
                nx = x + i
                ny = y + j
                if 0 <= nx < size_x and 0 <= ny < size_y:
                    if regions[nx, ny] == 0:
                        if np.linalg.norm(img[x, y] - img[nx, ny]) < threshold:
                            regions[nx, ny] = region
                            seed_list.append((nx, ny))
                            output += 1
                        elif borders:
                            regions[nx, ny] = -1
                            output += 1
    return output


def region_growing(img, threashold, borders=False):
    img = img.astype(np.float)
    size_x, size_y = img.shape[0], img.shape[1]
    total = size_y * size_x
    processed = 0
    regions = np.zeros((size_x, size_y), dtype=np.int)

    current = 0
    seed_list = []
    while pixel := random_seed(regions):
        precent = (processed / total) * 100
        print(f"\rComplete {precent:.2f}%", end="")
        current += 1
        seed_list.append(pixel)
        x, y = pixel
        regions[x, y] = current
        processed += 1
        while seed_list:
            pixel = seed_list.pop()
            processed += grow_region(
                img, regions, pixel, current, seed_list, threashold, borders
            )

    print()
    return regions, current


def apply_regions(img, regions, total):
    output = np.zeros(img.shape, dtype=np.uint8)
    for i in range(1, total + 1):
        indexes = np.where(regions == i)
        mean = np.mean(img[indexes], axis=0)
        mean = np.round(mean)
        mean = np.uint8(mean)
        output[indexes] = mean
    return output


def main():
    img = load_image_from_arg(color=True)
    regions, current = region_growing(img, 10)
    segmented = apply_regions(img, regions, current)
    show_image(img, segmented, wait=60)


if __name__ == "__main__":
    main()
