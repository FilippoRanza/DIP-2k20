#! /usr/bin/python

# autogenerated on 2020-03-20 15:14

# gray scale image quantization

import cv2
import numpy as np

from utils import *


def histogram(img, normalize=True):
    output = np.zeros(256)
    for row in img:
        for pixel in row:
            output[pixel] += 1

    if normalize:
        x, y = img.shape
        size = x * y
        output /= size
    return output


def make_intervals(count, min_val=0, max_val=256):
    delta = (max_val - min_val) // count
    output = [None] * count
    for i in range(count):
        tmp = min_val + delta
        output[i] = (min_val, tmp)
        min_val = tmp
    return output


def weighted_mean(a, b, hist):
    out = 0
    prob = 0
    for i, v in enumerate(hist[a:b], a):
        out += i * v
        prob += v
    if out == 0:
        return 0
    tmp = out / prob
    return int(tmp)


def make_centroids(levels, hist):
    output = [None] * len(levels)
    for i, (a, b) in enumerate(levels):
        v = weighted_mean(a, b, hist)
        output[i] = v

    return output


def mean_square_error(levels, centroids, hist):
    out = 0
    for (a, b), c in zip(levels, centroids):
        tmp = sum((hist[l] * ((l - c) ** 2) for l in range(a, b)))
        out += tmp
    return out


def update_levels(centroids, min_value=0, max_value=256):
    output = [None] * len(centroids)
    for i in range(len(centroids) - 1):
        tmp = (centroids[i] + centroids[i + 1]) // 2
        output[i] = (min_value, tmp)
        min_value = tmp

    tmp = (centroids[-2] + centroids[-1]) // 2
    output[-1] = (tmp, max_value)
    return output


def lloyd_max(img, levels, threshold):
    hist = histogram(img)
    levels = make_intervals(levels)
    centroids = make_centroids(levels, hist)
    mse = mean_square_error(levels, centroids, hist)
    while True:
        new_levels = update_levels(centroids)
        new_centroids = make_centroids(new_levels, hist)
        new_mse = mean_square_error(new_levels, new_centroids, hist)
        if new_mse < threshold * mse:
            mse = new_mse
            centroids = new_centroids
            levels = new_levels
        else:
            break

    return levels, centroids


def main():
    img = load_image()
    c, l = lloyd_max(img, 4, 0.1)

    print(c, l)


if __name__ == "__main__":
    main()
