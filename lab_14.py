#! /usr/bin/python

# autogenerated on 2020-05-06 22:13

# Split and Merge 

import cv2
import numpy as np

from utils import *

class QuadTree:

    def __init__(self, img):
        self.img = img
        self.tl = None
        self.tr = None
        self.bl = None
        self.br = None

    def split(self):
        size_x, size_y = self.img.shape
        x = size_x // 2
        y = size_y // 2
    
        tl = self.img[:x, :y]
        self.tl = QuadTree(tl)
        tr = self.img[x:, :y]
        self.tr = QuadTree(tr)
        bl = self.img[:x, y:]
        self.bl = QuadTree(bl)
        br = self.img[x:, y:]
        self.br = QuadTree(br)


    def run(self, min_size, var_threshold):
        size_x, size_y = self.img.shape
        if min_size <= size_x and min_size <= size_y:
            var = np.var(self.img.ravel())
            if var > var_threshold:
                self.split()
                self.tl.run(min_size, var_threshold)
                self.tr.run(min_size, var_threshold)
                self.bl.run(min_size, var_threshold)
                self.br.run(min_size, var_threshold)
                


def split(img, min_size, var_threshold):
    root = QuadTree(img)
    root.run(min_size, var_threshold)
    return root
    
def apply_tree(tree, call_back):
    if tree is None:
        return True
    else:
        bottom_tl = apply_tree(tree.tl, call_back)
        bottom_tr = apply_tree(tree.tr, call_back) 
        bottom_bl = apply_tree(tree.bl, call_back) 
        bottom_br = apply_tree(tree.br, call_back)                
        bottom = bottom_tl and bottom_tr and bottom_bl and bottom_br
        call_back(tree.img, bottom)
        return False

def draw_boarder(img, bottom):
    if not bottom:
        size_x, size_y = img.shape
        for x in range(size_x):
            img[x, 0] = 0
            img[x, size_y-1] = 0

        for y in range(size_y):
            img[0, y] = 0
            img[size_x-1, y] = 0


def avg_sub_region(img, bottom):
    if bottom:
        avg = np.mean(img.ravel())
        img[:, :] = avg

def main():
    full_img = load_image(color=True)
    for ch in range(3):
        img = full_img[:, :, ch]
        var = np.var(img.ravel())
        tree = split(img, 3, var // 10)
        apply_tree(tree, avg_sub_region)
        apply_tree(tree, draw_boarder)

    show_image(full_img, wait=10)

if __name__ == '__main__':
    main()
