#! /usr/bin/python

# autogenerated on 2020-04-02 17:23

# template matching

from sys import argv

import cv2
import numpy as np

from utils import *


def match(image, template, x, y):
    size_x, size_y = template.shape
    sub_img = image[x : x + size_x, y : y + size_y]
    delta = sub_img - template
    out = np.sum(np.abs(delta))
    return out


def template_match(img, tem):
    img_size_x, img_size_y = img.shape
    tem_size_x, tem_size_y = tem.shape

    size_x = img_size_x - tem_size_x
    size_y = img_size_y - tem_size_y

    img = img.astype(np.float)
    tem = tem.astype(np.float)

    abs_min = match(img, tem, 0, 0)
    pos = (0, 0)
    for x in range(size_x):
        for y in range(size_y):
            m = match(img, tem, x, y)
            if m < abs_min:
                abs_min = m
                pos = (x, y)

    return pos


def draw_square(img, pos, size, color):
    x, y = pos
    size_x, size_y = size

    for i in range(size_x):
        img[x + i, y, :] = color
        img[x + i, y + size_y, :] = color

    for i in range(size_y):
        img[x, y + i, :] = color
        img[x + size_x, y + i, :] = color


def get_file_names():
    if len(argv) >= 3:
        image_name = argv[1]
        template_name = argv[2]
    else:
        image_name = "image_where_to_search.png"
        template_name = "template.png"

    return image_name, template_name


def main():
    image_name, template_name = get_file_names()
    image = load_image(image_name)
    template = load_image(template_name)
    point = template_match(image, template)

    image = load_image(image_name, color=True)

    draw_square(image, point, template.shape, np.array([0, 0, 255], dtype=np.uint8))

    show_image(image, wait=5)


if __name__ == "__main__":
    main()
